# Constants:
const uart_ep = 2

# BTN0 is mapped to pin F4
const btn0_bank      = 5
const btn0_pin_mask  = $10

# BTN1 is mapped to pin F5
const btn1_bank      = 5
const btn1_pin_mask  = $20

# some ASCII codes (used in the debug command interface)
const ASCII_ESC = 27

# Variables:
dim string(6)
dim strlen

dim connected
dim conn_handle
dim res
dim adc_value
dim read_result
dim status_bytes(20)
dim calllongpress

# state for each button 
dim button_states(2) 
const btn_state_pressed = 1
const btn_state_released = 2 
const btn_state_undefined = 0 

# timestamp when button was pressed (2 * 4 bytes)
dim button_timestamps(8)
dim time_delta
dim num_notifications
dim notif_countdown

#LED remote parameters
dim minvalue
dim maxvalue
dim gapsize
dim distance_onoff

#More LED parameters
dim tempvalue
dim fadevalue
dim statusint
dim bluelight


# helper function to print integer to UART
procedure print_int32(int32_value)

    call util_itoa(int32_value)(strlen, string(0:strlen))
    call endpoint_send(uart_ep, strlen, string(0:strlen))

end 


# Boot event listener - Generated when the module is powered up or reset
# Also configures default values
event system_boot(major, minor, patch, build, bootloader, hw)
    
    # Set advertisement interval to 1000ms, use all three ADV channels
    call le_gap_set_adv_parameters(1600,1600,7)

    # Start Bluetooth LE advertisements and enable connections
    call le_gap_set_mode(2,2)
    
    # setup timer with 100ms interval
    call hardware_set_soft_timer(3276,0,0)
	
	#set LED parameters
	minvalue = 0
	maxvalue = 255
	gapsize = 51
	distance_onoff = 0
	statusint = 0
	fadevalue = 0
	tempvalue = 0
	bluelight = 0
	#call print_int32(minvalue+1000)
	#call endpoint_send(uart_ep, 2, "\r\n")
	#call print_int32(maxvalue+2000)
	#call endpoint_send(uart_ep, 2, "\r\n")
	#call print_int32(gapsize+3000)
	#call endpoint_send(uart_ep, 2, "\r\n")
	#call print_int32(distance_onoff+4000)
	#call endpoint_send(uart_ep, 2, "\r\n")
	call print_int32(statusint+5000)
	call endpoint_send(uart_ep, 2, "\r\n")
	call print_int32(fadevalue+6000)
	call endpoint_send(uart_ep, 2, "\r\n")
	call print_int32(bluelight+7000)
	call endpoint_send(uart_ep, 2, "\r\n")
	
end


# BLE connection connection event - Generated when a BLE connection is opened
event le_connection_opened(address, address_type, master, connection, bonding)

    connected = 1
    # make copy of connection handle for later use
    conn_handle = connection

end


# BLE connection disconnected event - Generated when a BLE connection is closed or lost
event le_connection_closed(reason, connection)

    connected = 0
    conn_handle = -1
    # Start Bluetooth LE advertisements and enable connections
    call le_gap_set_mode(2,2)
    
end


# This event indicates incoming data from an endpoint. Used here to implement simple debug
# command interface with the UART
event endpoint_data(endpoint,data_len, data_data)

    if endpoint != uart_ep then
        return
    end if
        
    if data_data(0:1) = ASCII_ESC then 
        call endpoint_send(uart_ep, 10, "--ESC---\r\n")
        # just a placeholder. you can enter any debug functionality here (e.g. disconnect if connection is active)
        return
    end if
    
end 


# capture writes from remote device. Remote device = Android Phone.

event gatt_server_attribute_value(connection,attribute,att_opcode,offset,value_len, value_data)
    
	if attribute = xgatt_minvalue then
        minvalue = value_data(0:1) 
		call print_int32(minvalue+1000)
		call endpoint_send(uart_ep, 2, "\r\n")
    end if
	
	if attribute = xgatt_maxvalue then
        maxvalue = value_data(0:1) 
		call print_int32(maxvalue+2000)
		call endpoint_send(uart_ep, 2, "\r\n")
    end if
	
	if attribute = xgatt_gapsize then    
        gapsize = value_data(0:1) 
		call print_int32(gapsize+3000)
		call endpoint_send(uart_ep, 2, "\r\n")
    end if

	if attribute = xgatt_distance_onoff then
        distance_onoff = value_data(0:1) 
		call print_int32(distance_onoff+4000)
		call endpoint_send(uart_ep, 2, "\r\n")
    end if
	
end


# Software timer event - generated when software timer runs out
event hardware_soft_timer(handle)

	
	if fadevalue > 0 then
		statusint = 1
	else 
		statusint = 0
	end if
	
	#statusled
	if statusint > 0 then
		call print_int32(5001)
		call endpoint_send(uart_ep, 2, "\r\n")
	end if
	
	if statusint = 0 then
		call print_int32(5000)
		call endpoint_send(uart_ep, 2, "\r\n")
	end if
	
	if statusint = 2 then
		call print_int32(5002)
		call endpoint_send(uart_ep, 2, "\r\n")
	end if 
	
	# ADC test: 

	# read voltage at pin PB11
	call hardware_read_adc(1, 11)(res, adc_value)
	
	#Use distance sensor
	adc_value = (adc_value-80)*3
	#call print_int32(adc_value)
	#call endpoint_send(uart_ep, 2, "kk")
	#call endpoint_send(uart_ep, 2, "\r\n")
	
	
	if adc_value <= 0 then
		adc_value = 0
	end if
	
	if adc_value > 255 then
		adc_value = 255
	end if 
	
	if tempvalue - 40 <= adc_value && adc_value <= tempvalue + 40 then
	
		if adc_value > maxvalue then 
			adc_value = maxvalue
		end if 
		
		if adc_value < minvalue then 
			adc_value= minvalue
		end if
		
		tempvalue = adc_value
		fadevalue = adc_value
		
		call print_int32(fadevalue+6000)
		call endpoint_send(uart_ep, 2, "\r\n")
		
	end if 
		
	
end


#Short button press procedure. This sets fadevalues
procedure button_press_short(button)

    if button = 0 then 
		fadevalue = fadevalue + gapsize
		
		if fadevalue > maxvalue then
			fadevalue = maxvalue
		end if
		
		if fadevalue < minvalue then
			fadevalue = minvalue
		end if
		
    else 
		fadevalue = fadevalue - gapsize
		
		if fadevalue > maxvalue then
			fadevalue = maxvalue
		end if
		
		if fadevalue < minvalue then
			fadevalue = minvalue
		end if

    end if
	
	call print_int32(fadevalue+6000)
	call endpoint_send(uart_ep, 2, "\r\n")
	
end 


#Long button press procedure. This sets fadevalues
procedure button_press_long(button)

    if button = 0 then 
        fadevalue = maxvalue   
    else 
		fadevalue = minvalue
    end if
	
	call print_int32(fadevalue+6000)
	call endpoint_send(uart_ep, 2, "\r\n")
	
end #procedure long press


#Double button press procedure. This is only triggered when both buttons are pressed same time. This sets blue light on/off
procedure button_press_double()

	if bluelight = 0 then 
		bluelight = 1 
	else 
		bluelight = 0
	end if
	
	call print_int32(bluelight+7000)
	call endpoint_send(uart_ep, 2, "\r\n")
	
end #procedure button_press_double


#Button press procedure. Call other button press functions. 
procedure button_pressed(button, timestamp)

    button_timestamps(button*4:4) = timestamp 
    button_states(button:1) = btn_state_pressed
    
end # procedure button_pressed


#Button release procedure. Records button release and calculates timedelta. 
procedure button_released(button, timestamp)

    time_delta = timestamp - button_timestamps(button*4:4)
    button_states(button:1) = btn_state_released
    if calllongpress = 0 && button_states(0:1) = btn_state_released && button_states(1:1) = btn_state_released then
		if time_delta > 3000 then 
			# long press
			call button_press_long(button)
		else
			# short press
			call button_press_short(button)
		end if 
	else
		#both pressed
		if button_states(0:1) = btn_state_pressed || button_states(1:1) = btn_state_pressed then
			calllongpress = 1
		else
			call button_press_double()
			calllongpress = 0
		end if
	end if
    
end # procedure button_released


#Button press interrupt event. Interrups when button is pressed.
event hardware_interrupt(interrupts, timestamp)

    if (interrupts & btn0_pin_mask) = btn0_pin_mask then
        # read pin state to detect if this was falling or rising edge
        call hardware_read_gpio(btn0_bank, btn0_pin_mask)(res, read_result)
    
        if read_result = btn0_pin_mask then
            #call endpoint_send(uart_ep, 15, "BTN0 RELEASED\r\n")
            call button_released(0, timestamp)
        else
            #call endpoint_send(uart_ep, 14, "BTN0 PRESSED\r\n")
            call button_pressed(0, timestamp)
        end if
        
    end if
    
    if (interrupts & btn1_pin_mask) = btn1_pin_mask then
        # read pin state to detect if this was falling or rising edge
        call hardware_read_gpio(btn1_bank, btn1_pin_mask)(res, read_result)
    
        if read_result = btn1_pin_mask then
            #call endpoint_send(uart_ep, 15, "BTN1 RELEASED\r\n")
            call button_released(1, timestamp)
        else
            #call endpoint_send(uart_ep, 14, "BTN1 PRESSED\r\n")
            call button_pressed(1, timestamp)
        end if
        
    end if

end


# End of BGScript